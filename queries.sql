                          ---Part A: SQL Proficiency (Operational Analysis)

--- Q-A1: Calculate the average delivery time for all orders in each city.
SELECT 
C.City, 
AVG(O.DeliveryTime) AS Average_Delivery_Time 
From 
Orders O 
Join 
Customers C ON O. CustomerID = C.CustomerID 
Group by 
C.City; 

---Note: This Query will reflect how efficiently orders are delivered to customers in different cities.                            
---Note: If you want to analyze how the location of the stores affects delivery times, use the store’s city. 



---Q-A2: Find the top 3 customers based on the total order value they have placed.
SELECT 
C.CustomerID, 
C.Name, 
SUM(O.TotalAmount) AS Total_Order_Value 
From 
Orders O 
Join 
Customers C ON O.CustomerID = C.CustomerID 
WHERE O.Status = 'completed'-(filter to include only completed orders) 
Group by 
C.CustomerID, C.Name 
Order by 
Total_Order_Value DESC 
Limit 3; 
--Note: This query ensures that only the completed order contribute to the total order value. 


---Q-A3: Retrieve the top 3 most frequently ordered products in Mumbai.
SELECT P.ProductID, P.ProductName, 
SUM(OD.Quantity) AS Total_Orders 
From 
OrderDetails OD 
Join 
Products P ON OD.ProductID = P.ProductID 
Join 
Order O ON OD.OrderID = O.OrderID 
Join 
Stores S ON O.StoreID = S.StoreID 
Where 
S.City = 'Mumbai' 
GROUP BY P.ProductID, P.ProductName 
ORDER BY Total_Orders DESC 
Limit 3; 
--Note: This query assumes that all tables (OrderDetails, Products, Orders, and Stores) have the necessary foreign key relationships and data to support the joins. 



--Q-A4: Identify the number of customers who have not placed an order in the last 30 days.
SELECT 
Count(Distinct CustomerID) as 
Customers_not_ordered_in_last_30_days 
From  
Customers C 
Left Join  
Orders O on C.CustomerID = O.CustomerId and O.Status = ‘Completed’  
And O.OrderDate >= Date_sub(curdate(), Interval 30 day) 
Where O.OrderID is null;



--Q-A5: Calculate the total revenue generated by each store.
Select  
S.StoreID, 
S.City, 
S.Area, 
Coalesce(Sum(O.TotalAmount), 0) as Total_Revenue 
From  
Stores S  
Left Join  
Orders O On S.StoreID = O.StoreID  
Group by  
S.StoreID, S.City, S.Area; 
--Note: Used left join and coalesce to ensure that all stores are included in the result set and total revenue is set to 0 for stores with no orders.





                    --Part B: Problem Solving (Customer Retention & Churn Analysis)

--Q-B1: Write a SQL query to identify customers who placed only one order in the last 3 months.
SELECT 
C.CustomerID, 
C.Name 
from 
Customers C 
Where  
C.TotalOrders = 1 
AND C.CustomerID IN ( 
SELECT O.CustomerID 
FROM Orders O 
WHERE O.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) 
and O.Status = 'completed');            
--(Only consider completed orders) 
--Note: TotalOrders only count valid orders(completed one) to avoid misleading results. 



--Q-B2: Create a list of cities with high percentages of single-order customers.
SELECT 
C.City, 
COUNT(C.CustomerID) AS Total_Customers, 
SUM(CASE when C.TotalOrders = 1 Then 1 Else 0 End) AS 
Single_Order_Customers, 
(SUM(CASE when C.TotalOrders = 1 Then 1 Else 0 End) / 
COUNT(C.CustomerID)) * 100 AS Percentage_Single_Order_Customers 
From 
Customers C 
Group by 
C.City 
Having 
Total_Customers > 0                                      
Order by 
(To avoid division by zero) 
Percentage_Single_Order_Customers DESC; 
---Summary: In given dataset Mumbai, Bangalore, and Pune have no single order customers whereas Delhi has a 100% single order customer percentage due to Charlie Brown being the only customer 
--with a single order. 
